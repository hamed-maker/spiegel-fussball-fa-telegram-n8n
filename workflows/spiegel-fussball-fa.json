{
  "name": "FootballSpiegel",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 15,
              "unit": "minutes"
            }
          ]
        }
      },
      "id": "8595560a-a9e9-4b15-be53-7c856444b207",
      "name": "Cron (every 15 min)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        432,
        -240
      ]
    },
    {
      "parameters": {
        "url": "https://www.spiegel.de/sport/fussball/index.rss",
        "options": {}
      },
      "id": "ec9297fa-c5ed-47fb-8ac1-0a00787ab0a3",
      "name": "RSS Read (SPIEGEL Fußball)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        656,
        -240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1-title-not-frauen",
              "leftValue": "={{ $json.title || '' }}",
              "rightValue": "frauen",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c2-title-not-women",
              "leftValue": "={{ $json.title || '' }}",
              "rightValue": "women",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c3-title-not-frauen-buli",
              "leftValue": "={{ $json.title || '' }}",
              "rightValue": "frauen-bundesliga",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c4-title-not-frauenwm",
              "leftValue": "={{ $json.title || '' }}",
              "rightValue": "frauenwm",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c5-sum-not-frauen",
              "leftValue": "={{ $json.summary || $json.description || '' }}",
              "rightValue": "frauen",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c6-sum-not-women",
              "leftValue": "={{ $json.summary || $json.description || '' }}",
              "rightValue": "women",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c7-sum-not-frauen-buli",
              "leftValue": "={{ $json.summary || $json.description || '' }}",
              "rightValue": "frauen-bundesliga",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            },
            {
              "id": "c8-sum-not-frauenwm",
              "leftValue": "={{ $json.summary || $json.description || '' }}",
              "rightValue": "frauenwm",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "name": "filter.operator.notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        880,
        -240
      ],
      "id": "35407f8c-6022-463d-b0a2-1a1d4d395757",
      "name": "Filter (men-only)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => { const j = item.json; let image = null; if (j.enclosure && j.enclosure.url) image = j.enclosure.url; if (!image && j[\"media:content\"] && j[\"media:content\"].url) image = j[\"media:content\"].url; if (!image && typeof j.content === 'string') { const m = j.content.match(/<img[^>]+src=[\"']([^\"']+)[\"']/i); if (m) image = m[1]; } const rawTeaser = (j.summary || j.description || ''); const teaser = typeof rawTeaser === 'string' ? rawTeaser.replace(/<[^>]*>/g, '').trim() : ''; item.json.imageUrl = image || null; item.json.teaser = teaser; return item; });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        -240
      ],
      "id": "0734a457-9592-47b5-8a8f-87c199860656",
      "name": "Code"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "provider",
              "value": "openai"
            }
          ]
        },
        "options": {}
      },
      "id": "4b612bd8-1c44-4ab0-9a1a-674ceb95ec34",
      "name": "Set provider (openai|gemini)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1328,
        -240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e18ac0f4-85be-4e6f-a17a-ccbc1efa4403",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "aea5ef82-753f-4968-8d31-822aa8ee5687",
      "name": "IF provider == openai",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1552,
        -240
      ]
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => { const title = item.json.title || ''; item.json.openai_body = { model: \"gpt-4o-mini\", temperature: 0.2, messages: [ { role: \"system\", content: \"Du bist ein Übersetzer DE→FA. Stil locker. Übersetze nur den Titel prägnant ins Persische. Eigennamen transliterieren (z.B. Bayern München→بایرن مونیخ). Keine Erklärungen, nur den übersetzten Titel.\" }, { role: \"user\", content: title } ] }; return item; });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -336
      ],
      "id": "5ae2c560-e13e-4527-9aa4-96f44c64ff11",
      "name": "Build OpenAI body"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.openai_body) }}\n",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2000,
        -336
      ],
      "id": "375ababe-15d7-4d6d-98b4-933cdf726c3e",
      "name": "OpenAI Translate (HTTP)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "M85qWBrhW6LUgZJs",
          "name": "openai-http"
        },
        "openAiApi": {
          "id": "ex7c2lmwfrZFbejG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => { const content = item.json.body?.choices?.[0]?.message?.content || ''; item.json.title_fa = (content || '').trim(); return item; });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        -336
      ],
      "id": "6aea3ecd-443f-4bc4-9f0e-665ca0508cf5",
      "name": "Pick title_fa (OpenAI)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => { const title = item.json.title || ''; const prompt = `ترجمه سریع آلمانی→فارسی، لحن خودمانی و خبری؛ فقط تیتر نهایی.\\nنام‌های خاص را با رسم‌الخط رایج فارسی بنویس (مثال: Bayern München → بایرن مونیخ).\\n\\nTITEL:\\n${title}`; item.json.gemini_body = { contents: [ { role: \"user\", parts: [ { text: prompt } ] } ], generationConfig: { temperature: 0.2 } }; return item; });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -144
      ],
      "id": "7343f566-6e97-4c32-b13d-afee6d70e4ac",
      "name": "Build Gemini body"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2000,
        -144
      ],
      "id": "f7f42b82-d724-4b36-b38b-6202aad561c8",
      "name": "Gemini Translate (HTTP)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => { const text = item.json.body?.candidates?.[0]?.content?.parts?.[0]?.text || ''; item.json.title_fa = (text || '').trim(); return item; });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        -144
      ],
      "id": "8a4b2202-8308-4f01-a3c3-1700489e0b3c",
      "name": "Pick title_fa (Gemini)"
    },
    {
      "parameters": {
        "jsCode": "// Filter items: keep only those newer than 20 minutes\nconst cutoff = Date.now() - 20 * 60 * 60 * 1000;\n\n// In Code-Node v2 benutzen wir $input.all() um alle Items zu holen\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json;\n\n  // Mögliche Datumsfelder aus dem RSS\n  const candidates = [j.isoDate, j.pubDate, j.date, j.pubdate];\n\n  let pubDate = null;\n  for (const c of candidates) {\n    if (!c) continue;\n    const d = new Date(c);\n    if (!isNaN(d.getTime())) {\n      pubDate = d;\n      break;\n    }\n  }\n\n  // Falls kein Datum gefunden → (für Tests) durchlassen\n  if (!pubDate) {\n    out.push(item);\n    continue;\n  }\n\n  if (pubDate.getTime() > cutoff) {\n    out.push(item); // neu genug → behalten\n  }\n}\n\n// Array von Items zurückgeben\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        -144
      ],
      "id": "881a606e-4ea0-4f05-827a-369f6cbdb44b",
      "name": "Time window (last 20 min)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const j = item.json;\n  const titleFa = (j.title_fa || j.title || '').toString().trim();\n  const link = (j.link || j.guid || '').toString().trim();\n\n  // Caption: only headline + source + link\n  let caption = titleFa;\n  if (link) caption += `\\n\\nمنبع: SPIEGEL\\n${link}`;\n\n  // Telegram caption safety (~1024 soft limit)\n  if (caption.length > 1000 && link) {\n    caption = caption.slice(0, 980) + '…\\n' + link;\n  } else if (caption.length > 1000) {\n    caption = caption.slice(0, 1000);\n  }\n\n  j.caption = caption;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2896,
        -240
      ],
      "id": "5992093d-5b39-4107-9c92-541e5cb65853",
      "name": "Build caption"
    }
  ],
  "pinData": {},
  "connections": {
    "Cron (every 15 min)": {
      "main": [
        [
          {
            "node": "RSS Read (SPIEGEL Fußball)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read (SPIEGEL Fußball)": {
      "main": [
        [
          {
            "node": "Filter (men-only)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter (men-only)": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set provider (openai|gemini)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set provider (openai|gemini)": {
      "main": [
        [
          {
            "node": "IF provider == openai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF provider == openai": {
      "main": [
        [
          {
            "node": "Build OpenAI body",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Gemini body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build OpenAI body": {
      "main": [
        [
          {
            "node": "OpenAI Translate (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Translate (HTTP)": {
      "main": [
        [
          {
            "node": "Pick title_fa (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick title_fa (OpenAI)": {
      "main": [
        [
          {
            "node": "Time window (last 20 min)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Gemini body": {
      "main": [
        [
          {
            "node": "Gemini Translate (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Translate (HTTP)": {
      "main": [
        [
          {
            "node": "Pick title_fa (Gemini)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick title_fa (Gemini)": {
      "main": [
        [
          {
            "node": "Time window (last 20 min)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Time window (last 20 min)": {
      "main": [
        [
          {
            "node": "Build caption",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ced3f83e-c7f9-4c9b-9837-4eb87d4641b7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "74338d6634b4803f2c29b4ddb0f0645d98af0974959d1701b31f3894967620b7"
  },
  "id": "m8Hae79VZG5Ut0rd",
  "tags": []
}